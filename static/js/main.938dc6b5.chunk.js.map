{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","index.js"],"names":["Square","props","className","highlight","onClick","value","renderRow","i","n","squares","winnerLine","square","j","concat","renderSquare","key","includes","Board","rows","Game","status","useState","size","setSize","Array","fill","location","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","isAscending","setIsAscending","handleReset","newHistory","current","winner","calculateWinner","moves","map","item","index","step","Math","trunc","convertToLocation","row","col","desc","classnames","userWin","reverse","type","onChange","e","target","HandleChange","slice","length","handleClick","winnerSquares","lines","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.938dc6b5.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Square(props){\n    const className = 'square' + (props.highlight ? ' highlight' : '');\n    return (\n        <button className={className} onClick = {props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\n","import React from 'react';\nimport Square from './../Square';\nfunction Board({ n, squares, onClick, winnerLine }) {\n    let rows = [];\n    for (let i = 0; i < n; i++) {\n        rows = rows.concat([renderRow(i, n, squares, onClick, winnerLine)]);\n    }\n    return (\n        <div>\n            {rows}\n        </div>\n    );\n};\nfunction renderRow(i, n, squares, onClick, winnerLine) {\n    let square = [];\n    for (let j = 0; j < n; j++) {\n        square = square.concat([(renderSquare(i * n + j, squares, winnerLine, onClick))]);\n    }\n    return (\n        <div className=\"board-row\" key={i}>\n            {square}\n        </div>\n    );\n}\nfunction renderSquare(i, squares, winnerLine, onClick) {\n    return (\n        <Square\n        highlight={winnerLine && winnerLine.includes(i)}\n        key={i}\n        value={squares[i]}\n        onClick={() => onClick(i)}\n        />\n    );\n};\nexport default Board;","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport Board from './../Board';\n\nexport default function Game() {\n    const [size, setSize] = useState(5);\n    const [history, setHistory] = useState([\n        {\n            squares: Array(size * size).fill(null),\n            location: null,\n        },\n    ]);\n    const [xIsNext, setXIsNext] = useState(true);\n    const [stepNumber, setStepNumber] = useState(0);\n    const [isAscending, setIsAscending] = useState(true);\n\n    const handleClick = (i) => {\n        const newHistory = history.slice(0, stepNumber + 1);\n        const current = newHistory[newHistory.length - 1];\n        const squares = current.squares.slice();\n        if (squares[i] || calculateWinner(squares, size)) {\n            return;\n        }\n        squares[i] = xIsNext ? 'X' : 'O';\n        setHistory([...newHistory, { squares, step: i }]);\n        setStepNumber(newHistory.length);\n        setXIsNext(!xIsNext);\n    };\n\n    const handleReset = () => {\n        setHistory([\n            {\n                squares: Array(9).fill(null),\n                location: null,\n            },\n        ]);\n        setXIsNext(true);\n        setStepNumber(0);\n        setIsAscending(true);\n    };\n    const jumpTo = (step) => {\n        setStepNumber(step);\n        setXIsNext(step % 2 === 0);\n    };\n\n    const convertToLocation = (step, size) => {\n        const col = Math.trunc(step / size) + 0;\n        const row = (step % size) + 0;\n        return [row, col];\n    };\n\n    const handleSortToggle = () => {\n        setIsAscending(!isAscending);\n    };\n\n    {\n        const newHistory = history;\n        // const history = this.state.history;\n        const current = newHistory[stepNumber];\n        // const stepNumber = this.state.stepNumber;\n        const winner = calculateWinner(current.squares, size);\n        // const isAscending = this.state.isAscending;\n        //const { winner, line } = calculateWinner(current.squares);\n        const moves = newHistory.map((item, index) => {\n            //const lastMoveSquare = step.lastMoveSquare;\n            const [row, col] = convertToLocation(item.step, size);\n            const desc = index ?\n                'Go to move #' + index + ' (' + col + ', ' + row + ')' :\n                'Go to game start';\n            return (\n                <li key={index}>\n                    <button\n                        className={classnames({ 'selected-item': stepNumber === index })}\n                        onClick={() => jumpTo(index)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner.userWin;\n        }\n        else if (!((current.squares).includes(null))) {\n            status = \"Draw\";\n        }\n        else {\n            status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n        }\n\n        if (!isAscending) {\n            moves.reverse();\n        }\n        function HandleChange(e) {\n            let value = e.target.value;\n            value = value < 5 ? 5 : value;\n            value = value > 35 ? 35 : value;\n            setSize(value);\n            handleReset();\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <div className=\"flex\">\n                        <div className=\"choose\">Choose size of board(from 5 to 35):</div>\n                        <input type=\"number\" value={size} className=\"status\" onChange={(e) => HandleChange(e)} />\n                    </div>\n                    <Board\n                        n={size}\n                        squares={current.squares}\n                        onClick={(i) => handleClick(i)}\n                        winnerLine={winner && winner.winnerSquares}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"turn\">{status}</div>\n                    <button onClick={handleReset}>Reset</button>\n                    <button onClick={handleSortToggle}>\n                        {isAscending ? 'Ascending' : 'Descending'}\n                    </button>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n\n}\nfunction calculateWinner(squares, size) {\n    if (squares) {\n        for (let i = 0; i < size; i++) {\n            for (let j = 0; j <= size - 5; j++) {\n                if (squares[j + i * size] && squares[j + i * size] === squares[j + i * size + 1] && squares[j + i * size + 1] === squares[j + i * size + 2] && squares[j + i * size + 2] === squares[j + i * size + 3]\n                    && squares[j + i * size + 3] === squares[j + i * size + 4]) {\n                    const lines = [j + i * size, j + i * size + 1, j + i * size + 2, j + i * size + 3, j + i * size + 4];\n                    return {\n                        userWin: squares[j + i * size],\n                        winnerSquares: lines\n                    }\n                }\n            };\n        };\n        for (let j = 0; j < size; j++) {\n            for (let i = 0; i <= size - 5; i++) {\n                if (squares[j + i * size] && squares[j + i * size] === squares[j + (i + 1) * size] && squares[j + (i + 1) * size] === squares[j + (i + 2) * size]\n                    && squares[j + (i + 2) * size] === squares[j + (i + 3) * size]\n                    && squares[j + (i + 3) * size] === squares[j + (i + 4) * size]) {\n                    const lines = [j + i * size, j + (i + 1) * size, j + (i + 2) * size, j + (i + 3) * size, j + (i + 4) * size];\n                    return {\n                        userWin: squares[j + i * size],\n                        winnerSquares: lines\n                    }\n                }\n            };\n        };\n        for (let j = 0; j < size; j++) {\n            for (let i = 0; i <= size; i++) {\n                if (squares[j + (size - i - 1) * size]\n                    && squares[j + (size - i - 1) * size] === squares[(j + 1) + (size - (i + 1) - 1) * size]\n                    && squares[(j + 1) + (size - (i + 1) - 1) * size] === squares[(j + 2) + (size - (i + 2) - 1) * size]\n                    && squares[(j + 2) + (size - (i + 2) - 1) * size] === squares[(j + 3) + (size - (i + 3) - 1) * size]\n                    && squares[(j + 3) + (size - (i + 3) - 1) * size] === squares[(j + 4) + (size - (i + 4) - 1) * size]) {\n                    const lines = [j + (size - i - 1) * size, (j + 1) + (size - (i + 1) - 1) * size,\n                    (j + 2) + (size - (i + 2) - 1) * size, (j + 3) + (size - (i + 3) - 1) * size,\n                    (j + 4) + (size - (i + 4) - 1) * size];\n                    return {\n                        userWin: squares[j + (size - i - 1) * size],\n                        winnerSquares: lines\n                    }\n                }\n            };\n        }\n        for (let j = 0; j < size; j++) {\n            for (let i = 0; i <= size; i++) {\n                if (squares[j + i * size]\n                    && squares[j + i * size] === squares[(j + 1) + (i + 1) * size]\n                    && squares[(j + 1) + (i + 1) * size] === squares[(j + 2) + (i + 2) * size]\n                    && squares[(j + 2) + (i + 2) * size] === squares[(j + 3) + (i + 3) * size]\n                    && squares[(j + 3) + (i + 3) * size] === squares[(j + 4) + (i + 4) * size]) {\n                    const lines = [j + i * size, j + 1 + (i + 1) * size, j + 2 + (i + 2) * size, j + 3 + (i + 3) * size, j + 4 + (i + 4) * size];\n                    return {\n                        userWin: squares[j + i * size],\n                        winnerSquares: lines\n                    }\n                }\n            };\n        };      \n    };\n    return null;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <React.StrictMode>\n      <Game />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}